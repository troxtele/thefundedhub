import{r as E}from"./react-95e28a79.js";import{s as m}from"./spacetime-5ab9584c.js";import{s as j}from"./timezone-soft-f8ea18f8.js";var x={"Pacific/Midway":"Midway Island, Samoa","Pacific/Honolulu":"Hawaii","America/Juneau":"Alaska","America/Boise":"Mountain Time","America/Dawson":"Dawson, Yukon","America/Chihuahua":"Chihuahua, La Paz, Mazatlan","America/Phoenix":"Arizona","America/Chicago":"Central Time","America/Regina":"Saskatchewan","America/Mexico_City":"Guadalajara, Mexico City, Monterrey","America/Belize":"Central America","America/Detroit":"Eastern Time","America/Bogota":"Bogota, Lima, Quito","America/Caracas":"Caracas, La Paz","America/Santiago":"Santiago","America/St_Johns":"Newfoundland and Labrador","America/Sao_Paulo":"Brasilia","America/Tijuana":"Tijuana","America/Montevideo":"Montevideo","America/Argentina/Buenos_Aires":"Buenos Aires, Georgetown","America/Godthab":"Greenland","America/Los_Angeles":"Pacific Time","Atlantic/Azores":"Azores","Atlantic/Cape_Verde":"Cape Verde Islands",GMT:"UTC","Europe/London":"Edinburgh, London","Europe/Dublin":"Dublin","Europe/Lisbon":"Lisbon","Africa/Casablanca":"Casablanca, Monrovia","Atlantic/Canary":"Canary Islands","Europe/Belgrade":"Belgrade, Bratislava, Budapest, Ljubljana, Prague","Europe/Sarajevo":"Sarajevo, Skopje, Warsaw, Zagreb","Europe/Brussels":"Brussels, Copenhagen, Madrid, Paris","Europe/Amsterdam":"Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna","Africa/Algiers":"West Central Africa","Europe/Bucharest":"Bucharest","Africa/Cairo":"Cairo","Europe/Helsinki":"Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius","Europe/Athens":"Athens","Asia/Jerusalem":"Jerusalem","Africa/Harare":"Harare, Pretoria","Europe/Moscow":"Istanbul, Minsk, Moscow, St. Petersburg, Volgograd","Asia/Kuwait":"Kuwait, Riyadh","Africa/Nairobi":"Nairobi","Asia/Baghdad":"Baghdad","Asia/Tehran":"Tehran","Asia/Dubai":"Abu Dhabi, Muscat","Asia/Baku":"Baku, Tbilisi, Yerevan","Asia/Kabul":"Kabul","Asia/Yekaterinburg":"Ekaterinburg","Asia/Karachi":"Islamabad, Karachi, Tashkent","Asia/Kolkata":"Chennai, Kolkata, Mumbai, New Delhi","Asia/Kathmandu":"Kathmandu","Asia/Dhaka":"Astana, Dhaka","Asia/Colombo":"Sri Jayawardenepura","Asia/Almaty":"Almaty, Novosibirsk","Asia/Rangoon":"Yangon Rangoon","Asia/Bangkok":"Bangkok, Hanoi, Jakarta","Asia/Krasnoyarsk":"Krasnoyarsk","Asia/Shanghai":"Beijing, Chongqing, Hong Kong SAR, Urumqi","Asia/Kuala_Lumpur":"Kuala Lumpur, Singapore","Asia/Taipei":"Taipei","Australia/Perth":"Perth","Asia/Irkutsk":"Irkutsk, Ulaanbaatar","Asia/Seoul":"Seoul","Asia/Tokyo":"Osaka, Sapporo, Tokyo","Asia/Yakutsk":"Yakutsk","Australia/Darwin":"Darwin","Australia/Adelaide":"Adelaide","Australia/Sydney":"Canberra, Melbourne, Sydney","Australia/Brisbane":"Brisbane","Australia/Hobart":"Hobart","Asia/Vladivostok":"Vladivostok","Pacific/Guam":"Guam, Port Moresby","Asia/Magadan":"Magadan, Solomon Islands, New Caledonia","Asia/Kamchatka":"Kamchatka, Marshall Islands","Pacific/Fiji":"Fiji Islands","Pacific/Auckland":"Auckland, Wellington","Pacific/Tongatapu":"Nuku'alofa"},N=x;function z({timezones:b=N,labelStyle:f="original",displayValue:_="GMT",maxAbbrLength:K=4}){const o=E.useMemo(()=>Object.entries(b).map(e=>{var a,i,r,g,h,k,p,v,C,T,w,y;try{const t=m.now(e[0]),u=t.timezone(),n=j(e[0]);let s="";const B=(r=(i=(a=n==null?void 0:n[0])==null?void 0:a.standard)==null?void 0:i.abbr)!=null?r:"",L=(k=(h=(g=n==null?void 0:n[0])==null?void 0:g.daylight)==null?void 0:h.abbr)!=null?k:B;let M=t.isDST()?L:B;const S=(C=(v=(p=n==null?void 0:n[0])==null?void 0:p.standard)==null?void 0:v.name)!=null?C:"",D=(y=(w=(T=n==null?void 0:n[0])==null?void 0:T.daylight)==null?void 0:w.name)!=null?y:S;let c=t.isDST()?D:S;const d=u.current.offset*60,A=`${d/60^0}:`+(d%60===0?"00":Math.abs(d%60)),l=`(${_}${A.includes("-")?A:`+${A}`}) ${e[1]}`;switch(f){case"original":s=l;break;case"altName":s=`${l} ${c?`(${c})`:""}`;break;case"abbrev":s=`${l} (${M.substring(0,K)})`;break;default:s=`${l}`}return{value:u.name,label:s,offset:u.current.offset,abbrev:M,altName:c}}catch{return null}}).filter(Boolean).sort((e,a)=>e.offset-a.offset),[f,b]),P=e=>{let a=m.now("GMT");try{a=m.now(e)}catch{return}return o.filter(i=>i.offset===a.timezone().current.offset).map(i=>{let r=0;return a.timezones[i.value.toLowerCase()]&&!!a.timezones[i.value.toLowerCase()].dst===a.timezone().hasDst?(i.value.toLowerCase().indexOf(a.tz.substring(a.tz.indexOf("/")+1))!==-1&&(r+=8),i.label.toLowerCase().indexOf(a.tz.substring(a.tz.indexOf("/")+1))!==-1&&(r+=4),i.value.toLowerCase().indexOf(a.tz.substring(0,a.tz.indexOf("/")))&&(r+=2),r+=1):i.value==="GMT"&&(r+=1),{tz:i,score:r}}).sort((i,r)=>r.score-i.score).map(({tz:i})=>i)[0]};return{options:o,parseTimezone:e=>{if(typeof e=="object"&&e.value&&e.label)return e;if(typeof e=="string")return o.find(a=>a.value===e)||e.indexOf("/")!==-1&&P(e);if(e.value&&!e.label)return o.find(a=>a.value===e.value)}}}export{N as t,z as u};
